require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Peoplefinder::GroupsController, type: :controller do
  routes { Peoplefinder::Engine.routes }

  before do
    mock_logged_in_user
  end

  # This should return the minimal set of attributes required to create a valid
  # Group. As you add validations to Group, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:group)
  }

  let(:invalid_attributes) {
    { name: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GroupsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:person) { create(:person) }

  describe 'GET index' do
    subject { get :index, {}, valid_session }

    it 'without any groups, it redirects to the new group page' do
      expect(subject).to redirect_to(new_group_path)
    end

    it 'with a department, it redirects to the departmental page' do
      department = create(:department)
      expect(subject).to redirect_to(group_path(department))
    end

    it 'with a department and a team, it still redirects to the departmental page' do
      department = create(:department)
      create(:group, parent: department)
      expect(subject).to redirect_to(group_path(department))
    end
  end

  describe 'GET show' do
    it 'assigns the requested group as @group' do
      group = create(:group, valid_attributes)
      get :show, { id: group.to_param }, valid_session
      expect(assigns(:group)).to eq(group)
    end
  end

  describe 'GET new' do
    it 'assigns a new group as @group' do
      get :new, {}, valid_session
      expect(assigns(:group)).to be_a_new(Peoplefinder::Group)
    end

    it 'assigns a membership object' do
      get :new, {}, valid_session
      expect(assigns(:group).memberships.length).to eql(1)
    end
  end

  describe 'GET edit' do
    let(:group) { create(:group, valid_attributes) }

    it 'assigns the requested group as @group' do
      get :edit, { id: group.to_param }, valid_session
      expect(assigns(:group)).to eql(group)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Group' do
        expect {
          post :create, { group: valid_attributes }, valid_session
        }.to change(Peoplefinder::Group, :count).by(1)
      end

      it 'assigns a newly created group as @group' do
        post :create, { group: valid_attributes }, valid_session
        expect(assigns(:group)).to be_a(Peoplefinder::Group)
        expect(assigns(:group)).to be_persisted
      end

      it 'redirects to the created group' do
        post :create, { group: valid_attributes }, valid_session
        expect(response).to redirect_to(Peoplefinder::Group.last)
      end
    end

    describe 'with invalid params' do
      before do
        post :create, { group: invalid_attributes }, valid_session
      end

      it 'assigns a newly created but unsaved group as @group' do
        expect(assigns(:group)).to be_a_new(Peoplefinder::Group)
      end

      it 're-renders the new template' do
        expect(response).to render_template('new')
      end

      it 'shows an error message' do
        expect(flash[:error]).to match(/created/)
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:new_attributes) {
        attributes_for(:group)
      }

      it 'updates the requested group' do
        group = create(:group, valid_attributes)
        put :update, { id: group.to_param, group: new_attributes }, valid_session
        group.reload
        expect(group.name).to eql(new_attributes[:name])
      end

      it 'assigns the requested group as @group' do
        group = create(:group, valid_attributes)
        put :update, { id: group.to_param, group: valid_attributes }, valid_session
        expect(assigns(:group)).to eq(group)
      end

      it 'redirects to the group' do
        group = create(:group, valid_attributes)
        put :update, { id: group.to_param, group: valid_attributes }, valid_session
        expect(response).to redirect_to(group)
      end
    end

    describe 'with invalid params' do
      let(:group) { create(:group, valid_attributes) }

      before do
        put :update, { id: group.to_param, group: invalid_attributes }, valid_session
      end

      it 'assigns the group as @group' do
        expect(assigns(:group)).to eq(group)
      end

      it 're-renders the edit template' do
        expect(response).to render_template('edit')
      end

      it 'shows an error message' do
        expect(flash[:error]).to match(/updated/)
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested group' do
      group = create(:group, valid_attributes)
      expect {
        delete :destroy, { id: group.to_param }, valid_session
      }.to change(Peoplefinder::Group, :count).by(-1)
    end

    it 'redirects to the parent group' do
      parent = create(:group, parent: nil)
      group = create(:group, parent: parent)
      delete :destroy, { id: group.to_param }, valid_session
      expect(response).to redirect_to(parent)
    end
  end
end
